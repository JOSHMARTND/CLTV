# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PB7yaWJXsjY3TjZ3n7uAjVop2LY3S6ft
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import gdown

# Google Drive File Link
file_url = "https://drive.google.com/uc?id=17c3eKb20iBcpWgd-vQjM3dBDx-rdM3-L"
output_file = "google_dataset.csv"

# Download the file from Google Drive
gdown.download(file_url, output_file, quiet=False)

# Load CSV file
df = pd.read_csv(output_file)

# Data Cleaning
df = df.dropna(subset=['Customer ID'])
df = df[(df['Quantity'] > 0) & (df['Price'] > 0)]
df['TotalRevenue'] = df['Quantity'] * df['Price']
df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])

# RFM Analysis
reference_date = df['InvoiceDate'].max() + pd.DateOffset(days=1)
rfm_df = df.groupby('Customer ID').agg({
    'InvoiceDate': lambda x: (reference_date - x.max()).days,
    'Invoice': 'nunique',
    'TotalRevenue': 'sum'
}).reset_index()
rfm_df.rename(columns={'InvoiceDate': 'Recency', 'Invoice': 'Frequency', 'TotalRevenue': 'Monetary'}, inplace=True)

# RFM Segmentation
rfm_df['R_Score'] = pd.qcut(rfm_df['Recency'], q=4, labels=[4, 3, 2, 1])
rfm_df['F_Score'] = pd.cut(rfm_df['Frequency'], bins=4, labels=[1, 2, 3, 4])
rfm_df['M_Score'] = pd.cut(rfm_df['Monetary'], bins=4, labels=[1, 2, 3, 4])
rfm_df['RFM_Score'] = rfm_df['R_Score'].astype(str) + rfm_df['F_Score'].astype(str) + rfm_df['M_Score'].astype(str)

# Visualizations
fig, axes = plt.subplots(1, 3, figsize=(18, 5))
sns.histplot(rfm_df['Recency'], bins=30, kde=True, ax=axes[0], color='blue')
axes[0].set_title('Recency Distribution')
sns.histplot(rfm_df['Frequency'], bins=30, kde=True, ax=axes[1], color='green')
axes[1].set_title('Frequency Distribution')
sns.histplot(rfm_df['Monetary'], bins=30, kde=True, ax=axes[2], color='red')
axes[2].set_title('Monetary Distribution')
plt.show()

# Top Spending Customers
top_spenders = rfm_df.nlargest(10, 'Monetary')
plt.figure(figsize=(10, 5))
sns.barplot(x=top_spenders['Customer ID'].astype(int), y=top_spenders['Monetary'], palette='Reds_r')
plt.xticks(rotation=45)
plt.title("Top 10 Spending Customers")
plt.show()

# CLV Prediction
X = rfm_df[['Recency', 'Frequency', 'Monetary']]
y = rfm_df['Monetary']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Model Performance
print(f"Mean Absolute Error: {mean_absolute_error(y_test, y_pred):.2f}")
print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.2f}")
print(f"RÂ² Score: {r2_score(y_test, y_pred):.4f}")

# Feature Importance
importances = model.feature_importances_
plt.figure(figsize=(6, 4))
sns.barplot(x=importances, y=X.columns, palette='viridis')
plt.title("Feature Importance in CLV Prediction")
plt.show()

print("Analysis Complete!")